// File generated by ./utils/generate-api-types at 2023-04-29T16:14:59Z
// using data from https://core.telegram.org/bots/api.

package bot

import "encoding/json"

// This object represents an incoming update.At most one of the optional parameters can be present in any given update.
type Update struct {
	UpdateId           int64               `json:"update_id"`
	Message            *Message            `json:"message,omitempty"`
	EditedMessage      *Message            `json:"edited_message,omitempty"`
	ChannelPost        *Message            `json:"channel_post,omitempty"`
	EditedChannelPost  *Message            `json:"edited_channel_post,omitempty"`
	InlineQuery        *InlineQuery        `json:"inline_query,omitempty"`
	ChosenInlineResult *ChosenInlineResult `json:"chosen_inline_result,omitempty"`
	CallbackQuery      *CallbackQuery      `json:"callback_query,omitempty"`
	ShippingQuery      *ShippingQuery      `json:"shipping_query,omitempty"`
	PreCheckoutQuery   *PreCheckoutQuery   `json:"pre_checkout_query,omitempty"`
	Poll               *Poll               `json:"poll,omitempty"`
	PollAnswer         *PollAnswer         `json:"poll_answer,omitempty"`
	MyChatMember       *ChatMemberUpdated  `json:"my_chat_member,omitempty"`
	ChatMember         *ChatMemberUpdated  `json:"chat_member,omitempty"`
	ChatJoinRequest    *ChatJoinRequest    `json:"chat_join_request,omitempty"`
}

// GetUpdatesParameters is the set of parameters for the getUpdates method.
// Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.
type GetUpdatesParameters struct {
	Offset         int      `json:"offset,omitempty"`
	Limit          int      `json:"limit,omitempty"`
	Timeout        int      `json:"timeout,omitempty"`
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
}

// SetWebhookParameters is the set of parameters for the setWebhook method.
// Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.
type SetWebhookParameters struct {
}

// DeleteWebhookParameters is the set of parameters for the deleteWebhook method.
// Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.
type DeleteWebhookParameters struct {
	DropPendingUpdates bool `json:"drop_pending_updates,omitempty"`
}

// GetWebhookInfoParameters is the set of parameters for the getWebhookInfo method.
// Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.
type GetWebhookInfoParameters struct {
}

// Describes the current status of a webhook.
type WebhookInfo struct {
	URL                          string   `json:"url"`
	HasCustomCertificate         bool     `json:"has_custom_certificate"`
	PendingUpdateCount           int      `json:"pending_update_count"`
	IpAddress                    string   `json:"ip_address,omitempty"`
	LastErrorDate                int      `json:"last_error_date,omitempty"`
	LastErrorMessage             string   `json:"last_error_message,omitempty"`
	LastSynchronizationErrorDate int      `json:"last_synchronization_error_date,omitempty"`
	MaxConnections               int      `json:"max_connections,omitempty"`
	AllowedUpdates               []string `json:"allowed_updates,omitempty"`
}

// This object represents a Telegram user or bot.
type User struct {
	Id                      int64  `json:"id"`
	IsBot                   bool   `json:"is_bot"`
	FirstName               string `json:"first_name"`
	LastName                string `json:"last_name,omitempty"`
	Username                string `json:"username,omitempty"`
	LanguageCode            string `json:"language_code,omitempty"`
	IsPremium               bool   `json:"is_premium,omitempty"`
	AddedToAttachmentMenu   bool   `json:"added_to_attachment_menu,omitempty"`
	CanJoinGroups           bool   `json:"can_join_groups,omitempty"`
	CanReadAllGroupMessages bool   `json:"can_read_all_group_messages,omitempty"`
	SupportsInlineQueries   bool   `json:"supports_inline_queries,omitempty"`
}

// This object represents a chat.
type Chat struct {
	Id                                 int64            `json:"id"`
	Type                               string           `json:"type"`
	Title                              string           `json:"title,omitempty"`
	Username                           string           `json:"username,omitempty"`
	FirstName                          string           `json:"first_name,omitempty"`
	LastName                           string           `json:"last_name,omitempty"`
	IsForum                            bool             `json:"is_forum,omitempty"`
	Photo                              *ChatPhoto       `json:"photo,omitempty"`
	ActiveUsernames                    []string         `json:"active_usernames,omitempty"`
	EmojiStatusCustomEmojiId           string           `json:"emoji_status_custom_emoji_id,omitempty"`
	Bio                                string           `json:"bio,omitempty"`
	HasPrivateForwards                 bool             `json:"has_private_forwards,omitempty"`
	HasRestrictedVoiceAndVideoMessages bool             `json:"has_restricted_voice_and_video_messages,omitempty"`
	JoinToSendMessages                 bool             `json:"join_to_send_messages,omitempty"`
	JoinByRequest                      bool             `json:"join_by_request,omitempty"`
	Description                        string           `json:"description,omitempty"`
	InviteLink                         string           `json:"invite_link,omitempty"`
	PinnedMessage                      *Message         `json:"pinned_message,omitempty"`
	Permissions                        *ChatPermissions `json:"permissions,omitempty"`
	SlowModeDelay                      int              `json:"slow_mode_delay,omitempty"`
	MessageAutoDeleteTime              int              `json:"message_auto_delete_time,omitempty"`
	HasAggressiveAntiSpamEnabled       bool             `json:"has_aggressive_anti_spam_enabled,omitempty"`
	HasHiddenMembers                   bool             `json:"has_hidden_members,omitempty"`
	HasProtectedContent                bool             `json:"has_protected_content,omitempty"`
	StickerSetName                     string           `json:"sticker_set_name,omitempty"`
	CanSetStickerSet                   bool             `json:"can_set_sticker_set,omitempty"`
	LinkedChatId                       int64            `json:"linked_chat_id,omitempty"`
	Location                           *ChatLocation    `json:"location,omitempty"`
}

// This object represents a message.
type Message struct {
	MessageId                     int64                          `json:"message_id"`
	MessageThreadId               int64                          `json:"message_thread_id,omitempty"`
	From                          *User                          `json:"from,omitempty"`
	SenderChat                    *Chat                          `json:"sender_chat,omitempty"`
	Date                          int                            `json:"date"`
	Chat                          *Chat                          `json:"chat"`
	ForwardFrom                   *User                          `json:"forward_from,omitempty"`
	ForwardFromChat               *Chat                          `json:"forward_from_chat,omitempty"`
	ForwardFromMessageId          int64                          `json:"forward_from_message_id,omitempty"`
	ForwardSignature              string                         `json:"forward_signature,omitempty"`
	ForwardSenderName             string                         `json:"forward_sender_name,omitempty"`
	ForwardDate                   int                            `json:"forward_date,omitempty"`
	IsTopicMessage                bool                           `json:"is_topic_message,omitempty"`
	IsAutomaticForward            bool                           `json:"is_automatic_forward,omitempty"`
	ReplyToMessage                *Message                       `json:"reply_to_message,omitempty"`
	ViaBot                        *User                          `json:"via_bot,omitempty"`
	EditDate                      int                            `json:"edit_date,omitempty"`
	HasProtectedContent           bool                           `json:"has_protected_content,omitempty"`
	MediaGroupId                  string                         `json:"media_group_id,omitempty"`
	AuthorSignature               string                         `json:"author_signature,omitempty"`
	Text                          string                         `json:"text,omitempty"`
	Entities                      []*MessageEntity               `json:"entities,omitempty"`
	Animation                     *Animation                     `json:"animation,omitempty"`
	Audio                         *Audio                         `json:"audio,omitempty"`
	Document                      *Document                      `json:"document,omitempty"`
	Photo                         []*PhotoSize                   `json:"photo,omitempty"`
	Sticker                       *Sticker                       `json:"sticker,omitempty"`
	Video                         *Video                         `json:"video,omitempty"`
	VideoNote                     *VideoNote                     `json:"video_note,omitempty"`
	Voice                         *Voice                         `json:"voice,omitempty"`
	Caption                       string                         `json:"caption,omitempty"`
	CaptionEntities               []*MessageEntity               `json:"caption_entities,omitempty"`
	HasMediaSpoiler               bool                           `json:"has_media_spoiler,omitempty"`
	Contact                       *Contact                       `json:"contact,omitempty"`
	Dice                          *Dice                          `json:"dice,omitempty"`
	Game                          *Game                          `json:"game,omitempty"`
	Poll                          *Poll                          `json:"poll,omitempty"`
	Venue                         *Venue                         `json:"venue,omitempty"`
	Location                      *Location                      `json:"location,omitempty"`
	NewChatMembers                []*User                        `json:"new_chat_members,omitempty"`
	LeftChatMember                *User                          `json:"left_chat_member,omitempty"`
	NewChatTitle                  string                         `json:"new_chat_title,omitempty"`
	NewChatPhoto                  []*PhotoSize                   `json:"new_chat_photo,omitempty"`
	DeleteChatPhoto               bool                           `json:"delete_chat_photo,omitempty"`
	GroupChatCreated              bool                           `json:"group_chat_created,omitempty"`
	SupergroupChatCreated         bool                           `json:"supergroup_chat_created,omitempty"`
	ChannelChatCreated            bool                           `json:"channel_chat_created,omitempty"`
	MessageAutoDeleteTimerChanged *MessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed,omitempty"`
	MigrateToChatId               int64                          `json:"migrate_to_chat_id,omitempty"`
	MigrateFromChatId             int64                          `json:"migrate_from_chat_id,omitempty"`
	PinnedMessage                 *Message                       `json:"pinned_message,omitempty"`
	Invoice                       *Invoice                       `json:"invoice,omitempty"`
	SuccessfulPayment             *SuccessfulPayment             `json:"successful_payment,omitempty"`
	UserShared                    *UserShared                    `json:"user_shared,omitempty"`
	ChatShared                    *ChatShared                    `json:"chat_shared,omitempty"`
	ConnectedWebsite              string                         `json:"connected_website,omitempty"`
	WriteAccessAllowed            *WriteAccessAllowed            `json:"write_access_allowed,omitempty"`
	PassportData                  *PassportData                  `json:"passport_data,omitempty"`
	ProximityAlertTriggered       *ProximityAlertTriggered       `json:"proximity_alert_triggered,omitempty"`
	ForumTopicCreated             *ForumTopicCreated             `json:"forum_topic_created,omitempty"`
	ForumTopicEdited              *ForumTopicEdited              `json:"forum_topic_edited,omitempty"`
	ForumTopicClosed              *ForumTopicClosed              `json:"forum_topic_closed,omitempty"`
	ForumTopicReopened            *ForumTopicReopened            `json:"forum_topic_reopened,omitempty"`
	GeneralForumTopicHidden       *GeneralForumTopicHidden       `json:"general_forum_topic_hidden,omitempty"`
	GeneralForumTopicUnhidden     *GeneralForumTopicUnhidden     `json:"general_forum_topic_unhidden,omitempty"`
	VideoChatScheduled            *VideoChatScheduled            `json:"video_chat_scheduled,omitempty"`
	VideoChatStarted              *VideoChatStarted              `json:"video_chat_started,omitempty"`
	VideoChatEnded                *VideoChatEnded                `json:"video_chat_ended,omitempty"`
	VideoChatParticipantsInvited  *VideoChatParticipantsInvited  `json:"video_chat_participants_invited,omitempty"`
	WebAppData                    *WebAppData                    `json:"web_app_data,omitempty"`
	ReplyMarkup                   *InlineKeyboardMarkup          `json:"reply_markup,omitempty"`
}

// This object represents a unique message identifier.
type MessageId struct {
	MessageId int64 `json:"message_id"`
}

// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
type MessageEntity struct {
	Type          string `json:"type"`
	Offset        int    `json:"offset"`
	Length        int    `json:"length"`
	URL           string `json:"url,omitempty"`
	User          *User  `json:"user,omitempty"`
	Language      string `json:"language,omitempty"`
	CustomEmojiId string `json:"custom_emoji_id,omitempty"`
}

// This object represents one size of a photo or a file / sticker thumbnail.
type PhotoSize struct {
	FileId       string `json:"file_id"`
	FileUniqueId string `json:"file_unique_id"`
	Width        int    `json:"width"`
	Height       int    `json:"height"`
	FileSize     int    `json:"file_size,omitempty"`
}

// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
type Animation struct {
	FileId       string     `json:"file_id"`
	FileUniqueId string     `json:"file_unique_id"`
	Width        int        `json:"width"`
	Height       int        `json:"height"`
	Duration     int        `json:"duration"`
	Thumbnail    *PhotoSize `json:"thumbnail,omitempty"`
	FileName     string     `json:"file_name,omitempty"`
	MIMEType     string     `json:"mime_type,omitempty"`
	FileSize     int        `json:"file_size,omitempty"`
}

// This object represents an audio file to be treated as music by the Telegram clients.
type Audio struct {
	FileId       string     `json:"file_id"`
	FileUniqueId string     `json:"file_unique_id"`
	Duration     int        `json:"duration"`
	Performer    string     `json:"performer,omitempty"`
	Title        string     `json:"title,omitempty"`
	FileName     string     `json:"file_name,omitempty"`
	MIMEType     string     `json:"mime_type,omitempty"`
	FileSize     int        `json:"file_size,omitempty"`
	Thumbnail    *PhotoSize `json:"thumbnail,omitempty"`
}

// This object represents a general file (as opposed to photos, voice messages and audio files).
type Document struct {
	FileId       string     `json:"file_id"`
	FileUniqueId string     `json:"file_unique_id"`
	Thumbnail    *PhotoSize `json:"thumbnail,omitempty"`
	FileName     string     `json:"file_name,omitempty"`
	MIMEType     string     `json:"mime_type,omitempty"`
	FileSize     int        `json:"file_size,omitempty"`
}

// This object represents a video file.
type Video struct {
	FileId       string     `json:"file_id"`
	FileUniqueId string     `json:"file_unique_id"`
	Width        int        `json:"width"`
	Height       int        `json:"height"`
	Duration     int        `json:"duration"`
	Thumbnail    *PhotoSize `json:"thumbnail,omitempty"`
	FileName     string     `json:"file_name,omitempty"`
	MIMEType     string     `json:"mime_type,omitempty"`
	FileSize     int        `json:"file_size,omitempty"`
}

// This object represents a video message (available in Telegram apps as of v.4.0).
type VideoNote struct {
	FileId       string     `json:"file_id"`
	FileUniqueId string     `json:"file_unique_id"`
	Length       int        `json:"length"`
	Duration     int        `json:"duration"`
	Thumbnail    *PhotoSize `json:"thumbnail,omitempty"`
	FileSize     int        `json:"file_size,omitempty"`
}

// This object represents a voice note.
type Voice struct {
	FileId       string `json:"file_id"`
	FileUniqueId string `json:"file_unique_id"`
	Duration     int    `json:"duration"`
	MIMEType     string `json:"mime_type,omitempty"`
	FileSize     int    `json:"file_size,omitempty"`
}

// This object represents a phone contact.
type Contact struct {
	PhoneNumber string `json:"phone_number"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name,omitempty"`
	UserId      int64  `json:"user_id,omitempty"`
	Vcard       string `json:"vcard,omitempty"`
}

// This object represents an animated emoji that displays a random value.
type Dice struct {
	Emoji string `json:"emoji"`
	Value int    `json:"value"`
}

// This object contains information about one answer option in a poll.
type PollOption struct {
	Text       string `json:"text"`
	VoterCount int    `json:"voter_count"`
}

// This object represents an answer of a user in a non-anonymous poll.
type PollAnswer struct {
	PollId    string `json:"poll_id"`
	User      *User  `json:"user"`
	OptionIds []int  `json:"option_ids"`
}

// This object contains information about a poll.
type Poll struct {
	Id                    string           `json:"id"`
	Question              string           `json:"question"`
	Options               []*PollOption    `json:"options"`
	TotalVoterCount       int              `json:"total_voter_count"`
	IsClosed              bool             `json:"is_closed"`
	IsAnonymous           bool             `json:"is_anonymous"`
	Type                  string           `json:"type"`
	AllowsMultipleAnswers bool             `json:"allows_multiple_answers"`
	CorrectOptionId       int64            `json:"correct_option_id,omitempty"`
	Explanation           string           `json:"explanation,omitempty"`
	ExplanationEntities   []*MessageEntity `json:"explanation_entities,omitempty"`
	OpenPeriod            int              `json:"open_period,omitempty"`
	CloseDate             int              `json:"close_date,omitempty"`
}

// This object represents a point on the map.
type Location struct {
	Longitude            float64 `json:"longitude"`
	Latitude             float64 `json:"latitude"`
	HorizontalAccuracy   float64 `json:"horizontal_accuracy,omitempty"`
	LivePeriod           int     `json:"live_period,omitempty"`
	Heading              int     `json:"heading,omitempty"`
	ProximityAlertRadius int     `json:"proximity_alert_radius,omitempty"`
}

// This object represents a venue.
type Venue struct {
	Location        *Location `json:"location"`
	Title           string    `json:"title"`
	Address         string    `json:"address"`
	FoursquareId    string    `json:"foursquare_id,omitempty"`
	FoursquareType  string    `json:"foursquare_type,omitempty"`
	GooglePlaceId   string    `json:"google_place_id,omitempty"`
	GooglePlaceType string    `json:"google_place_type,omitempty"`
}

// Describes data sent from a Web App to the bot.
type WebAppData struct {
	Data       string `json:"data"`
	ButtonText string `json:"button_text"`
}

// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
type ProximityAlertTriggered struct {
	Traveler *User `json:"traveler"`
	Watcher  *User `json:"watcher"`
	Distance int   `json:"distance"`
}

// This object represents a service message about a change in auto-delete timer settings.
type MessageAutoDeleteTimerChanged struct {
	MessageAutoDeleteTime int `json:"message_auto_delete_time"`
}

// This object represents a service message about a new forum topic created in the chat.
type ForumTopicCreated struct {
	Name              string `json:"name"`
	IconColor         int    `json:"icon_color"`
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// This object represents a service message about a forum topic closed in the chat. Currently holds no information.
type ForumTopicClosed struct {
}

// This object represents a service message about an edited forum topic.
type ForumTopicEdited struct {
	Name              string `json:"name,omitempty"`
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// This object represents a service message about a forum topic reopened in the chat. Currently holds no information.
type ForumTopicReopened struct {
}

// This object represents a service message about General forum topic hidden in the chat. Currently holds no information.
type GeneralForumTopicHidden struct {
}

// This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.
type GeneralForumTopicUnhidden struct {
}

// This object contains information about the user whose identifier was shared with the bot using a KeyboardButtonRequestUser button.
type UserShared struct {
	RequestId int64 `json:"request_id"`
	UserId    int64 `json:"user_id"`
}

// This object contains information about the chat whose identifier was shared with the bot using a KeyboardButtonRequestChat button.
type ChatShared struct {
	RequestId int64 `json:"request_id"`
	ChatId    int64 `json:"chat_id"`
}

// This object represents a service message about a user allowing a bot to write messages after adding the bot to the attachment menu or launching a Web App from a link.
type WriteAccessAllowed struct {
	WebAppName string `json:"web_app_name,omitempty"`
}

// This object represents a service message about a video chat scheduled in the chat.
type VideoChatScheduled struct {
	StartDate int `json:"start_date"`
}

// This object represents a service message about a video chat started in the chat. Currently holds no information.
type VideoChatStarted struct {
}

// This object represents a service message about a video chat ended in the chat.
type VideoChatEnded struct {
	Duration int `json:"duration"`
}

// This object represents a service message about new members invited to a video chat.
type VideoChatParticipantsInvited struct {
	Users []*User `json:"users"`
}

// This object represent a user's profile pictures.
type UserProfilePhotos struct {
	TotalCount int            `json:"total_count"`
	Photos     [][]*PhotoSize `json:"photos"`
}

// This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
type File struct {
}

// Describes a Web App.
type WebAppInfo struct {
	URL string `json:"url"`
}

// This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).
type ReplyKeyboardMarkup struct {
	Keyboard              [][]*KeyboardButton `json:"keyboard"`
	IsPersistent          bool                `json:"is_persistent,omitempty"`
	ResizeKeyboard        bool                `json:"resize_keyboard,omitempty"`
	OneTimeKeyboard       bool                `json:"one_time_keyboard,omitempty"`
	InputFieldPlaceholder string              `json:"input_field_placeholder,omitempty"`
	Selective             bool                `json:"selective,omitempty"`
}

// This object represents one button of the reply keyboard. For simple text buttons, String can be used instead of this object to specify the button text. The optional fields web_app, request_user, request_chat, request_contact, request_location, and request_poll are mutually exclusive.
type KeyboardButton struct {
	Text            string                     `json:"text"`
	RequestUser     *KeyboardButtonRequestUser `json:"request_user"`
	RequestChat     *KeyboardButtonRequestChat `json:"request_chat"`
	RequestContact  bool                       `json:"request_contact,omitempty"`
	RequestLocation bool                       `json:"request_location,omitempty"`
	RequestPoll     *KeyboardButtonPollType    `json:"request_poll,omitempty"`
	WebApp          *WebAppInfo                `json:"web_app,omitempty"`
}

// This object defines the criteria used to request a suitable user. The identifier of the selected user will be shared with the bot when the corresponding button is pressed. More about requesting users »
type KeyboardButtonRequestUser struct {
	RequestId     int64 `json:"request_id"`
	UserIsBot     bool  `json:"user_is_bot,omitempty"`
	UserIsPremium bool  `json:"user_is_premium,omitempty"`
}

// This object defines the criteria used to request a suitable chat. The identifier of the selected chat will be shared with the bot when the corresponding button is pressed. More about requesting chats »
type KeyboardButtonRequestChat struct {
	RequestId               int64                    `json:"request_id"`
	ChatIsChannel           bool                     `json:"chat_is_channel"`
	ChatIsForum             bool                     `json:"chat_is_forum,omitempty"`
	ChatHasUsername         bool                     `json:"chat_has_username,omitempty"`
	ChatIsCreated           bool                     `json:"chat_is_created,omitempty"`
	UserAdministratorRights *ChatAdministratorRights `json:"user_administrator_rights,omitempty"`
	BotAdministratorRights  *ChatAdministratorRights `json:"bot_administrator_rights,omitempty"`
	BotIsMember             bool                     `json:"bot_is_member,omitempty"`
}

// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
type KeyboardButtonPollType struct {
	Type string `json:"type,omitempty"`
}

// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).
type ReplyKeyboardRemove struct {
	RemoveKeyboard bool `json:"remove_keyboard"`
	Selective      bool `json:"selective,omitempty"`
}

// This object represents an inline keyboard that appears right next to the message it belongs to.
type InlineKeyboardMarkup struct {
	InlineKeyboard [][]*InlineKeyboardButton `json:"inline_keyboard"`
}

// This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
type InlineKeyboardButton struct {
	Text                         string                       `json:"text"`
	URL                          string                       `json:"url,omitempty"`
	CallbackData                 string                       `json:"callback_data,omitempty"`
	WebApp                       *WebAppInfo                  `json:"web_app,omitempty"`
	LoginURL                     *LoginUrl                    `json:"login_url,omitempty"`
	SwitchInlineQuery            string                       `json:"switch_inline_query,omitempty"`
	SwitchInlineQueryCurrentChat string                       `json:"switch_inline_query_current_chat,omitempty"`
	SwitchInlineQueryChosenChat  *SwitchInlineQueryChosenChat `json:"switch_inline_query_chosen_chat,omitempty"`
	CallbackGame                 *CallbackGame                `json:"callback_game,omitempty"`
	Pay                          bool                         `json:"pay,omitempty"`
}

// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
type LoginUrl struct {
}

// This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.
type SwitchInlineQueryChosenChat struct {
	Query             string `json:"query,omitempty"`
	AllowUserChats    bool   `json:"allow_user_chats,omitempty"`
	AllowBotChats     bool   `json:"allow_bot_chats,omitempty"`
	AllowGroupChats   bool   `json:"allow_group_chats,omitempty"`
	AllowChannelChats bool   `json:"allow_channel_chats,omitempty"`
}

// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
type CallbackQuery struct {
	Id              string   `json:"id"`
	From            *User    `json:"from"`
	Message         *Message `json:"message,omitempty"`
	InlineMessageId string   `json:"inline_message_id,omitempty"`
	ChatInstance    string   `json:"chat_instance"`
	Data            string   `json:"data,omitempty"`
	GameShortName   string   `json:"game_short_name,omitempty"`
}

// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
type ForceReply struct {
	ForceReply            bool   `json:"force_reply"`
	InputFieldPlaceholder string `json:"input_field_placeholder,omitempty"`
	Selective             bool   `json:"selective,omitempty"`
}

// This object represents a chat photo.
type ChatPhoto struct {
	SmallFileId       string `json:"small_file_id"`
	SmallFileUniqueId string `json:"small_file_unique_id"`
	BigFileId         string `json:"big_file_id"`
	BigFileUniqueId   string `json:"big_file_unique_id"`
}

// Represents an invite link for a chat.
type ChatInviteLink struct {
	InviteLink              string `json:"invite_link"`
	Creator                 *User  `json:"creator"`
	CreatesJoinRequest      bool   `json:"creates_join_request"`
	IsPrimary               bool   `json:"is_primary"`
	IsRevoked               bool   `json:"is_revoked"`
	Name                    string `json:"name,omitempty"`
	ExpireDate              int    `json:"expire_date,omitempty"`
	MemberLimit             int    `json:"member_limit,omitempty"`
	PendingJoinRequestCount int    `json:"pending_join_request_count,omitempty"`
}

// Represents the rights of an administrator in a chat.
type ChatAdministratorRights struct {
	IsAnonymous         bool `json:"is_anonymous"`
	CanManageChat       bool `json:"can_manage_chat"`
	CanDeleteMessages   bool `json:"can_delete_messages"`
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	CanRestrictMembers  bool `json:"can_restrict_members"`
	CanPromoteMembers   bool `json:"can_promote_members"`
	CanChangeInfo       bool `json:"can_change_info"`
	CanInviteUsers      bool `json:"can_invite_users"`
	CanPostMessages     bool `json:"can_post_messages,omitempty"`
	CanEditMessages     bool `json:"can_edit_messages,omitempty"`
	CanPinMessages      bool `json:"can_pin_messages,omitempty"`
	CanManageTopics     bool `json:"can_manage_topics,omitempty"`
}

// This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:
type ChatMember struct {
}

// Represents a chat member that owns the chat and has all administrator privileges.
type ChatMemberOwner struct {
	Status      string `json:"status"`
	User        *User  `json:"user"`
	IsAnonymous bool   `json:"is_anonymous"`
	CustomTitle string `json:"custom_title,omitempty"`
}

// Represents a chat member that has some additional privileges.
type ChatMemberAdministrator struct {
	Status              string `json:"status"`
	User                *User  `json:"user"`
	CanBeEdited         bool   `json:"can_be_edited"`
	IsAnonymous         bool   `json:"is_anonymous"`
	CanManageChat       bool   `json:"can_manage_chat"`
	CanDeleteMessages   bool   `json:"can_delete_messages"`
	CanManageVideoChats bool   `json:"can_manage_video_chats"`
	CanRestrictMembers  bool   `json:"can_restrict_members"`
	CanPromoteMembers   bool   `json:"can_promote_members"`
	CanChangeInfo       bool   `json:"can_change_info"`
	CanInviteUsers      bool   `json:"can_invite_users"`
	CanPostMessages     bool   `json:"can_post_messages,omitempty"`
	CanEditMessages     bool   `json:"can_edit_messages,omitempty"`
	CanPinMessages      bool   `json:"can_pin_messages,omitempty"`
	CanManageTopics     bool   `json:"can_manage_topics,omitempty"`
	CustomTitle         string `json:"custom_title,omitempty"`
}

// Represents a chat member that has no additional privileges or restrictions.
type ChatMemberMember struct {
	Status string `json:"status"`
	User   *User  `json:"user"`
}

// Represents a chat member that is under certain restrictions in the chat. Supergroups only.
type ChatMemberRestricted struct {
	Status                string `json:"status"`
	User                  *User  `json:"user"`
	IsMember              bool   `json:"is_member"`
	CanSendMessages       bool   `json:"can_send_messages"`
	CanSendAudios         bool   `json:"can_send_audios"`
	CanSendDocuments      bool   `json:"can_send_documents"`
	CanSendPhotos         bool   `json:"can_send_photos"`
	CanSendVideos         bool   `json:"can_send_videos"`
	CanSendVideoNotes     bool   `json:"can_send_video_notes"`
	CanSendVoiceNotes     bool   `json:"can_send_voice_notes"`
	CanSendPolls          bool   `json:"can_send_polls"`
	CanSendOtherMessages  bool   `json:"can_send_other_messages"`
	CanAddWebPagePreviews bool   `json:"can_add_web_page_previews"`
	CanChangeInfo         bool   `json:"can_change_info"`
	CanInviteUsers        bool   `json:"can_invite_users"`
	CanPinMessages        bool   `json:"can_pin_messages"`
	CanManageTopics       bool   `json:"can_manage_topics"`
	UntilDate             int    `json:"until_date"`
}

// Represents a chat member that isn't currently a member of the chat, but may join it themselves.
type ChatMemberLeft struct {
	Status string `json:"status"`
	User   *User  `json:"user"`
}

// Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.
type ChatMemberBanned struct {
	Status    string `json:"status"`
	User      *User  `json:"user"`
	UntilDate int    `json:"until_date"`
}

// This object represents changes in the status of a chat member.
type ChatMemberUpdated struct {
	Chat                    *Chat           `json:"chat"`
	From                    *User           `json:"from"`
	Date                    int             `json:"date"`
	OldChatMember           *ChatMember     `json:"old_chat_member"`
	NewChatMember           *ChatMember     `json:"new_chat_member"`
	InviteLink              *ChatInviteLink `json:"invite_link,omitempty"`
	ViaChatFolderInviteLink bool            `json:"via_chat_folder_invite_link,omitempty"`
}

// Represents a join request sent to a chat.
type ChatJoinRequest struct {
	Chat       *Chat           `json:"chat"`
	From       *User           `json:"from"`
	UserChatId int64           `json:"user_chat_id"`
	Date       int             `json:"date"`
	Bio        string          `json:"bio,omitempty"`
	InviteLink *ChatInviteLink `json:"invite_link,omitempty"`
}

// Describes actions that a non-administrator user is allowed to take in a chat.
type ChatPermissions struct {
	CanSendMessages       bool `json:"can_send_messages,omitempty"`
	CanSendAudios         bool `json:"can_send_audios,omitempty"`
	CanSendDocuments      bool `json:"can_send_documents,omitempty"`
	CanSendPhotos         bool `json:"can_send_photos,omitempty"`
	CanSendVideos         bool `json:"can_send_videos,omitempty"`
	CanSendVideoNotes     bool `json:"can_send_video_notes,omitempty"`
	CanSendVoiceNotes     bool `json:"can_send_voice_notes,omitempty"`
	CanSendPolls          bool `json:"can_send_polls,omitempty"`
	CanSendOtherMessages  bool `json:"can_send_other_messages,omitempty"`
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`
	CanChangeInfo         bool `json:"can_change_info,omitempty"`
	CanInviteUsers        bool `json:"can_invite_users,omitempty"`
	CanPinMessages        bool `json:"can_pin_messages,omitempty"`
	CanManageTopics       bool `json:"can_manage_topics,omitempty"`
}

// Represents a location to which a chat is connected.
type ChatLocation struct {
	Location *Location `json:"location"`
	Address  string    `json:"address"`
}

// This object represents a forum topic.
type ForumTopic struct {
	MessageThreadId   int64  `json:"message_thread_id"`
	Name              string `json:"name"`
	IconColor         int    `json:"icon_color"`
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// This object represents a bot command.
type BotCommand struct {
	Command     string `json:"command"`
	Description string `json:"description"`
}

// This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
type BotCommandScope struct {
}

// Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.
type BotCommandScopeDefault struct {
	Type string `json:"type"`
}

// Represents the scope of bot commands, covering all private chats.
type BotCommandScopeAllPrivateChats struct {
	Type string `json:"type"`
}

// Represents the scope of bot commands, covering all group and supergroup chats.
type BotCommandScopeAllGroupChats struct {
	Type string `json:"type"`
}

// Represents the scope of bot commands, covering all group and supergroup chat administrators.
type BotCommandScopeAllChatAdministrators struct {
	Type string `json:"type"`
}

// Represents the scope of bot commands, covering a specific chat.
type BotCommandScopeChat struct {
	Type   string  `json:"type"`
	ChatId Integer `json:"chat_id"`
}

// Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.
type BotCommandScopeChatAdministrators struct {
	Type   string  `json:"type"`
	ChatId Integer `json:"chat_id"`
}

// Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
type BotCommandScopeChatMember struct {
	Type   string  `json:"type"`
	ChatId Integer `json:"chat_id"`
	UserId int64   `json:"user_id"`
}

// This object represents the bot's name.
type BotName struct {
	Name string `json:"name"`
}

// This object represents the bot's description.
type BotDescription struct {
	Description string `json:"description"`
}

// This object represents the bot's short description.
type BotShortDescription struct {
	ShortDescription string `json:"short_description"`
}

// This object describes the bot's menu button in a private chat. It should be one of
type MenuButton struct {
}

// Represents a menu button, which opens the bot's list of commands.
type MenuButtonCommands struct {
	Type string `json:"type"`
}

// Represents a menu button, which launches a Web App.
type MenuButtonWebApp struct {
	Type   string      `json:"type"`
	Text   string      `json:"text"`
	WebApp *WebAppInfo `json:"web_app"`
}

// Describes that no specific value for the menu button was set.
type MenuButtonDefault struct {
	Type string `json:"type"`
}

// Describes why a request was unsuccessful.
type ResponseParameters struct {
	MigrateToChatId int64 `json:"migrate_to_chat_id,omitempty"`
	RetryAfter      int   `json:"retry_after,omitempty"`
}

// This object represents the content of a media message to be sent. It should be one of
type InputMedia struct {
}

// Represents a photo to be sent.
type InputMediaPhoto struct {
	Type            string           `json:"type"`
	Media           string           `json:"media"`
	Caption         string           `json:"caption,omitempty"`
	ParseMode       string           `json:"parse_mode,omitempty"`
	CaptionEntities []*MessageEntity `json:"caption_entities,omitempty"`
	HasSpoiler      bool             `json:"has_spoiler,omitempty"`
}

// Represents a video to be sent.
type InputMediaVideo struct {
	Type              string           `json:"type"`
	Media             string           `json:"media"`
	Thumbnail         json.RawMessage  `json:"thumbnail,omitempty"` // InputFile or String
	Caption           string           `json:"caption,omitempty"`
	ParseMode         string           `json:"parse_mode,omitempty"`
	CaptionEntities   []*MessageEntity `json:"caption_entities,omitempty"`
	Width             int              `json:"width,omitempty"`
	Height            int              `json:"height,omitempty"`
	Duration          int              `json:"duration,omitempty"`
	SupportsStreaming bool             `json:"supports_streaming,omitempty"`
	HasSpoiler        bool             `json:"has_spoiler,omitempty"`
}

// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
type InputMediaAnimation struct {
	Type            string           `json:"type"`
	Media           string           `json:"media"`
	Thumbnail       json.RawMessage  `json:"thumbnail,omitempty"` // InputFile or String
	Caption         string           `json:"caption,omitempty"`
	ParseMode       string           `json:"parse_mode,omitempty"`
	CaptionEntities []*MessageEntity `json:"caption_entities,omitempty"`
	Width           int              `json:"width,omitempty"`
	Height          int              `json:"height,omitempty"`
	Duration        int              `json:"duration,omitempty"`
	HasSpoiler      bool             `json:"has_spoiler,omitempty"`
}

// Represents an audio file to be treated as music to be sent.
type InputMediaAudio struct {
	Type            string           `json:"type"`
	Media           string           `json:"media"`
	Thumbnail       json.RawMessage  `json:"thumbnail,omitempty"` // InputFile or String
	Caption         string           `json:"caption,omitempty"`
	ParseMode       string           `json:"parse_mode,omitempty"`
	CaptionEntities []*MessageEntity `json:"caption_entities,omitempty"`
	Duration        int              `json:"duration,omitempty"`
	Performer       string           `json:"performer,omitempty"`
	Title           string           `json:"title,omitempty"`
}

// Represents a general file to be sent.
type InputMediaDocument struct {
	Type                        string           `json:"type"`
	Media                       string           `json:"media"`
	Thumbnail                   json.RawMessage  `json:"thumbnail,omitempty"` // InputFile or String
	Caption                     string           `json:"caption,omitempty"`
	ParseMode                   string           `json:"parse_mode,omitempty"`
	CaptionEntities             []*MessageEntity `json:"caption_entities,omitempty"`
	DisableContentTypeDetection bool             `json:"disable_content_type_detection,omitempty"`
}

// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
type InputFile struct {
}

// GetMeParameters is the set of parameters for the getMe method.
// A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
type GetMeParameters struct {
}

// LogOutParameters is the set of parameters for the logOut method.
// Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.
type LogOutParameters struct {
}

// CloseParameters is the set of parameters for the close method.
// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.
type CloseParameters struct {
}

// SendMessageParameters is the set of parameters for the sendMessage method.
// Use this method to send text messages. On success, the sent Message is returned.
type SendMessageParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Text                     string           `json:"text"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	Entities                 []*MessageEntity `json:"entities,omitempty"`
	DisableWebPagePreview    bool             `json:"disable_web_page_preview,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// ForwardMessageParameters is the set of parameters for the forwardMessage method.
// Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.
type ForwardMessageParameters struct {
	ChatId              Integer `json:"chat_id"`
	MessageThreadId     int64   `json:"message_thread_id,omitempty"`
	FromChatId          Integer `json:"from_chat_id"`
	DisableNotification bool    `json:"disable_notification,omitempty"`
	ProtectContent      bool    `json:"protect_content,omitempty"`
	MessageId           int64   `json:"message_id"`
}

// CopyMessageParameters is the set of parameters for the copyMessage method.
// Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.
type CopyMessageParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	FromChatId               Integer          `json:"from_chat_id"`
	MessageId                int64            `json:"message_id"`
	Caption                  string           `json:"caption,omitempty"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	CaptionEntities          []*MessageEntity `json:"caption_entities,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendPhotoParameters is the set of parameters for the sendPhoto method.
// Use this method to send photos. On success, the sent Message is returned.
type SendPhotoParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Photo                    interface{}      `json:"photo"` // InputFile or String
	Caption                  string           `json:"caption,omitempty"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	CaptionEntities          []*MessageEntity `json:"caption_entities,omitempty"`
	HasSpoiler               bool             `json:"has_spoiler,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendAudioParameters is the set of parameters for the sendAudio method.
// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
type SendAudioParameters struct {
}

// SendDocumentParameters is the set of parameters for the sendDocument method.
// Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
type SendDocumentParameters struct {
	ChatId                      Integer          `json:"chat_id"`
	MessageThreadId             int64            `json:"message_thread_id,omitempty"`
	Document                    interface{}      `json:"document"`            // InputFile or String
	Thumbnail                   interface{}      `json:"thumbnail,omitempty"` // InputFile or String
	Caption                     string           `json:"caption,omitempty"`
	ParseMode                   string           `json:"parse_mode,omitempty"`
	CaptionEntities             []*MessageEntity `json:"caption_entities,omitempty"`
	DisableContentTypeDetection bool             `json:"disable_content_type_detection,omitempty"`
	DisableNotification         bool             `json:"disable_notification,omitempty"`
	ProtectContent              bool             `json:"protect_content,omitempty"`
	ReplyToMessageId            int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply    bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup                 interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendVideoParameters is the set of parameters for the sendVideo method.
// Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
type SendVideoParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Video                    interface{}      `json:"video"` // InputFile or String
	Duration                 int              `json:"duration,omitempty"`
	Width                    int              `json:"width,omitempty"`
	Height                   int              `json:"height,omitempty"`
	Thumbnail                interface{}      `json:"thumbnail,omitempty"` // InputFile or String
	Caption                  string           `json:"caption,omitempty"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	CaptionEntities          []*MessageEntity `json:"caption_entities,omitempty"`
	HasSpoiler               bool             `json:"has_spoiler,omitempty"`
	SupportsStreaming        bool             `json:"supports_streaming,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendAnimationParameters is the set of parameters for the sendAnimation method.
// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
type SendAnimationParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Animation                interface{}      `json:"animation"` // InputFile or String
	Duration                 int              `json:"duration,omitempty"`
	Width                    int              `json:"width,omitempty"`
	Height                   int              `json:"height,omitempty"`
	Thumbnail                interface{}      `json:"thumbnail,omitempty"` // InputFile or String
	Caption                  string           `json:"caption,omitempty"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	CaptionEntities          []*MessageEntity `json:"caption_entities,omitempty"`
	HasSpoiler               bool             `json:"has_spoiler,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendVoiceParameters is the set of parameters for the sendVoice method.
// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
type SendVoiceParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Voice                    interface{}      `json:"voice"` // InputFile or String
	Caption                  string           `json:"caption,omitempty"`
	ParseMode                string           `json:"parse_mode,omitempty"`
	CaptionEntities          []*MessageEntity `json:"caption_entities,omitempty"`
	Duration                 int              `json:"duration,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendVideoNoteParameters is the set of parameters for the sendVideoNote method.
// As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.
type SendVideoNoteParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	VideoNote                interface{} `json:"video_note"` // InputFile or String
	Duration                 int         `json:"duration,omitempty"`
	Length                   int         `json:"length,omitempty"`
	Thumbnail                interface{} `json:"thumbnail,omitempty"` // InputFile or String
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendMediaGroupParameters is the set of parameters for the sendMediaGroup method.
// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.
type SendMediaGroupParameters struct {
	ChatId                   Integer       `json:"chat_id"`
	MessageThreadId          int64         `json:"message_thread_id,omitempty"`
	Media                    []interface{} `json:"media"`
	DisableNotification      bool          `json:"disable_notification,omitempty"`
	ProtectContent           bool          `json:"protect_content,omitempty"`
	ReplyToMessageId         int64         `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool          `json:"allow_sending_without_reply,omitempty"`
}

// SendLocationParameters is the set of parameters for the sendLocation method.
// Use this method to send point on the map. On success, the sent Message is returned.
type SendLocationParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	Latitude                 float64     `json:"latitude"`
	Longitude                float64     `json:"longitude"`
	HorizontalAccuracy       float64     `json:"horizontal_accuracy,omitempty"`
	LivePeriod               int         `json:"live_period,omitempty"`
	Heading                  int         `json:"heading,omitempty"`
	ProximityAlertRadius     int         `json:"proximity_alert_radius,omitempty"`
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendVenueParameters is the set of parameters for the sendVenue method.
// Use this method to send information about a venue. On success, the sent Message is returned.
type SendVenueParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	Latitude                 float64     `json:"latitude"`
	Longitude                float64     `json:"longitude"`
	Title                    string      `json:"title"`
	Address                  string      `json:"address"`
	FoursquareId             string      `json:"foursquare_id,omitempty"`
	FoursquareType           string      `json:"foursquare_type,omitempty"`
	GooglePlaceId            string      `json:"google_place_id,omitempty"`
	GooglePlaceType          string      `json:"google_place_type,omitempty"`
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendContactParameters is the set of parameters for the sendContact method.
// Use this method to send phone contacts. On success, the sent Message is returned.
type SendContactParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	PhoneNumber              string      `json:"phone_number"`
	FirstName                string      `json:"first_name"`
	LastName                 string      `json:"last_name,omitempty"`
	Vcard                    string      `json:"vcard,omitempty"`
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendPollParameters is the set of parameters for the sendPoll method.
// Use this method to send a native poll. On success, the sent Message is returned.
type SendPollParameters struct {
	ChatId                   Integer          `json:"chat_id"`
	MessageThreadId          int64            `json:"message_thread_id,omitempty"`
	Question                 string           `json:"question"`
	Options                  []string         `json:"options"`
	IsAnonymous              bool             `json:"is_anonymous,omitempty"`
	Type                     string           `json:"type,omitempty"`
	AllowsMultipleAnswers    bool             `json:"allows_multiple_answers,omitempty"`
	CorrectOptionId          int64            `json:"correct_option_id,omitempty"`
	Explanation              string           `json:"explanation,omitempty"`
	ExplanationParseMode     string           `json:"explanation_parse_mode,omitempty"`
	ExplanationEntities      []*MessageEntity `json:"explanation_entities,omitempty"`
	OpenPeriod               int              `json:"open_period,omitempty"`
	CloseDate                int              `json:"close_date,omitempty"`
	IsClosed                 bool             `json:"is_closed,omitempty"`
	DisableNotification      bool             `json:"disable_notification,omitempty"`
	ProtectContent           bool             `json:"protect_content,omitempty"`
	ReplyToMessageId         int64            `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool             `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{}      `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendDiceParameters is the set of parameters for the sendDice method.
// Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.
type SendDiceParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	Emoji                    string      `json:"emoji,omitempty"`
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// SendChatActionParameters is the set of parameters for the sendChatAction method.
// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.
type SendChatActionParameters struct {
}

// GetUserProfilePhotosParameters is the set of parameters for the getUserProfilePhotos method.
// Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
type GetUserProfilePhotosParameters struct {
	UserId int64 `json:"user_id"`
	Offset int   `json:"offset,omitempty"`
	Limit  int   `json:"limit,omitempty"`
}

// GetFileParameters is the set of parameters for the getFile method.
// Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.
type GetFileParameters struct {
	FileId string `json:"file_id"`
}

// BanChatMemberParameters is the set of parameters for the banChatMember method.
// Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
type BanChatMemberParameters struct {
	ChatId         Integer `json:"chat_id"`
	UserId         int64   `json:"user_id"`
	UntilDate      int     `json:"until_date,omitempty"`
	RevokeMessages bool    `json:"revoke_messages,omitempty"`
}

// UnbanChatMemberParameters is the set of parameters for the unbanChatMember method.
// Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.
type UnbanChatMemberParameters struct {
	ChatId       Integer `json:"chat_id"`
	UserId       int64   `json:"user_id"`
	OnlyIfBanned bool    `json:"only_if_banned,omitempty"`
}

// RestrictChatMemberParameters is the set of parameters for the restrictChatMember method.
// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.
type RestrictChatMemberParameters struct {
	ChatId                        Integer          `json:"chat_id"`
	UserId                        int64            `json:"user_id"`
	Permissions                   *ChatPermissions `json:"permissions"`
	UseIndependentChatPermissions bool             `json:"use_independent_chat_permissions,omitempty"`
	UntilDate                     int              `json:"until_date,omitempty"`
}

// PromoteChatMemberParameters is the set of parameters for the promoteChatMember method.
// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.
type PromoteChatMemberParameters struct {
	ChatId              Integer `json:"chat_id"`
	UserId              int64   `json:"user_id"`
	IsAnonymous         bool    `json:"is_anonymous,omitempty"`
	CanManageChat       bool    `json:"can_manage_chat,omitempty"`
	CanPostMessages     bool    `json:"can_post_messages,omitempty"`
	CanEditMessages     bool    `json:"can_edit_messages,omitempty"`
	CanDeleteMessages   bool    `json:"can_delete_messages,omitempty"`
	CanManageVideoChats bool    `json:"can_manage_video_chats,omitempty"`
	CanRestrictMembers  bool    `json:"can_restrict_members,omitempty"`
	CanPromoteMembers   bool    `json:"can_promote_members,omitempty"`
	CanChangeInfo       bool    `json:"can_change_info,omitempty"`
	CanInviteUsers      bool    `json:"can_invite_users,omitempty"`
	CanPinMessages      bool    `json:"can_pin_messages,omitempty"`
	CanManageTopics     bool    `json:"can_manage_topics,omitempty"`
}

// SetChatAdministratorCustomTitleParameters is the set of parameters for the setChatAdministratorCustomTitle method.
// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.
type SetChatAdministratorCustomTitleParameters struct {
	ChatId      Integer `json:"chat_id"`
	UserId      int64   `json:"user_id"`
	CustomTitle string  `json:"custom_title"`
}

// BanChatSenderChatParameters is the set of parameters for the banChatSenderChat method.
// Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.
type BanChatSenderChatParameters struct {
	ChatId       Integer `json:"chat_id"`
	SenderChatId int64   `json:"sender_chat_id"`
}

// UnbanChatSenderChatParameters is the set of parameters for the unbanChatSenderChat method.
// Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.
type UnbanChatSenderChatParameters struct {
	ChatId       Integer `json:"chat_id"`
	SenderChatId int64   `json:"sender_chat_id"`
}

// SetChatPermissionsParameters is the set of parameters for the setChatPermissions method.
// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.
type SetChatPermissionsParameters struct {
	ChatId                        Integer          `json:"chat_id"`
	Permissions                   *ChatPermissions `json:"permissions"`
	UseIndependentChatPermissions bool             `json:"use_independent_chat_permissions,omitempty"`
}

// ExportChatInviteLinkParameters is the set of parameters for the exportChatInviteLink method.
// Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.
type ExportChatInviteLinkParameters struct {
	ChatId Integer `json:"chat_id"`
}

// CreateChatInviteLinkParameters is the set of parameters for the createChatInviteLink method.
// Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.
type CreateChatInviteLinkParameters struct {
	ChatId             Integer `json:"chat_id"`
	Name               string  `json:"name,omitempty"`
	ExpireDate         int     `json:"expire_date,omitempty"`
	MemberLimit        int     `json:"member_limit,omitempty"`
	CreatesJoinRequest bool    `json:"creates_join_request,omitempty"`
}

// EditChatInviteLinkParameters is the set of parameters for the editChatInviteLink method.
// Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.
type EditChatInviteLinkParameters struct {
	ChatId             Integer `json:"chat_id"`
	InviteLink         string  `json:"invite_link"`
	Name               string  `json:"name,omitempty"`
	ExpireDate         int     `json:"expire_date,omitempty"`
	MemberLimit        int     `json:"member_limit,omitempty"`
	CreatesJoinRequest bool    `json:"creates_join_request,omitempty"`
}

// RevokeChatInviteLinkParameters is the set of parameters for the revokeChatInviteLink method.
// Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.
type RevokeChatInviteLinkParameters struct {
	ChatId     Integer `json:"chat_id"`
	InviteLink string  `json:"invite_link"`
}

// ApproveChatJoinRequestParameters is the set of parameters for the approveChatJoinRequest method.
// Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
type ApproveChatJoinRequestParameters struct {
	ChatId Integer `json:"chat_id"`
	UserId int64   `json:"user_id"`
}

// DeclineChatJoinRequestParameters is the set of parameters for the declineChatJoinRequest method.
// Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
type DeclineChatJoinRequestParameters struct {
	ChatId Integer `json:"chat_id"`
	UserId int64   `json:"user_id"`
}

// SetChatPhotoParameters is the set of parameters for the setChatPhoto method.
// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
type SetChatPhotoParameters struct {
	ChatId Integer    `json:"chat_id"`
	Photo  *InputFile `json:"photo"`
}

// DeleteChatPhotoParameters is the set of parameters for the deleteChatPhoto method.
// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
type DeleteChatPhotoParameters struct {
	ChatId Integer `json:"chat_id"`
}

// SetChatTitleParameters is the set of parameters for the setChatTitle method.
// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
type SetChatTitleParameters struct {
	ChatId Integer `json:"chat_id"`
	Title  string  `json:"title"`
}

// SetChatDescriptionParameters is the set of parameters for the setChatDescription method.
// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
type SetChatDescriptionParameters struct {
	ChatId      Integer `json:"chat_id"`
	Description string  `json:"description,omitempty"`
}

// PinChatMessageParameters is the set of parameters for the pinChatMessage method.
// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
type PinChatMessageParameters struct {
	ChatId              Integer `json:"chat_id"`
	MessageId           int64   `json:"message_id"`
	DisableNotification bool    `json:"disable_notification,omitempty"`
}

// UnpinChatMessageParameters is the set of parameters for the unpinChatMessage method.
// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
type UnpinChatMessageParameters struct {
	ChatId    Integer `json:"chat_id"`
	MessageId int64   `json:"message_id,omitempty"`
}

// UnpinAllChatMessagesParameters is the set of parameters for the unpinAllChatMessages method.
// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
type UnpinAllChatMessagesParameters struct {
	ChatId Integer `json:"chat_id"`
}

// LeaveChatParameters is the set of parameters for the leaveChat method.
// Use this method for your bot to leave a group, supergroup or channel. Returns True on success.
type LeaveChatParameters struct {
	ChatId Integer `json:"chat_id"`
}

// GetChatParameters is the set of parameters for the getChat method.
// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.
type GetChatParameters struct {
	ChatId Integer `json:"chat_id"`
}

// GetChatAdministratorsParameters is the set of parameters for the getChatAdministrators method.
// Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.
type GetChatAdministratorsParameters struct {
	ChatId Integer `json:"chat_id"`
}

// GetChatMemberCountParameters is the set of parameters for the getChatMemberCount method.
// Use this method to get the number of members in a chat. Returns Int on success.
type GetChatMemberCountParameters struct {
	ChatId Integer `json:"chat_id"`
}

// GetChatMemberParameters is the set of parameters for the getChatMember method.
// Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.
type GetChatMemberParameters struct {
	ChatId Integer `json:"chat_id"`
	UserId int64   `json:"user_id"`
}

// SetChatStickerSetParameters is the set of parameters for the setChatStickerSet method.
// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
type SetChatStickerSetParameters struct {
	ChatId         Integer `json:"chat_id"`
	StickerSetName string  `json:"sticker_set_name"`
}

// DeleteChatStickerSetParameters is the set of parameters for the deleteChatStickerSet method.
// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
type DeleteChatStickerSetParameters struct {
	ChatId Integer `json:"chat_id"`
}

// GetForumTopicIconStickersParameters is the set of parameters for the getForumTopicIconStickers method.
// Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.
type GetForumTopicIconStickersParameters struct {
}

// CreateForumTopicParameters is the set of parameters for the createForumTopic method.
// Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.
type CreateForumTopicParameters struct {
	ChatId            Integer `json:"chat_id"`
	Name              string  `json:"name"`
	IconColor         int     `json:"icon_color,omitempty"`
	IconCustomEmojiId string  `json:"icon_custom_emoji_id,omitempty"`
}

// EditForumTopicParameters is the set of parameters for the editForumTopic method.
// Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
type EditForumTopicParameters struct {
	ChatId            Integer `json:"chat_id"`
	MessageThreadId   int64   `json:"message_thread_id"`
	Name              string  `json:"name,omitempty"`
	IconCustomEmojiId string  `json:"icon_custom_emoji_id,omitempty"`
}

// CloseForumTopicParameters is the set of parameters for the closeForumTopic method.
// Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
type CloseForumTopicParameters struct {
	ChatId          Integer `json:"chat_id"`
	MessageThreadId int64   `json:"message_thread_id"`
}

// ReopenForumTopicParameters is the set of parameters for the reopenForumTopic method.
// Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
type ReopenForumTopicParameters struct {
	ChatId          Integer `json:"chat_id"`
	MessageThreadId int64   `json:"message_thread_id"`
}

// DeleteForumTopicParameters is the set of parameters for the deleteForumTopic method.
// Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.
type DeleteForumTopicParameters struct {
	ChatId          Integer `json:"chat_id"`
	MessageThreadId int64   `json:"message_thread_id"`
}

// UnpinAllForumTopicMessagesParameters is the set of parameters for the unpinAllForumTopicMessages method.
// Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
type UnpinAllForumTopicMessagesParameters struct {
	ChatId          Integer `json:"chat_id"`
	MessageThreadId int64   `json:"message_thread_id"`
}

// EditGeneralForumTopicParameters is the set of parameters for the editGeneralForumTopic method.
// Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.
type EditGeneralForumTopicParameters struct {
	ChatId Integer `json:"chat_id"`
	Name   string  `json:"name"`
}

// CloseGeneralForumTopicParameters is the set of parameters for the closeGeneralForumTopic method.
// Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
type CloseGeneralForumTopicParameters struct {
	ChatId Integer `json:"chat_id"`
}

// ReopenGeneralForumTopicParameters is the set of parameters for the reopenGeneralForumTopic method.
// Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.
type ReopenGeneralForumTopicParameters struct {
	ChatId Integer `json:"chat_id"`
}

// HideGeneralForumTopicParameters is the set of parameters for the hideGeneralForumTopic method.
// Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.
type HideGeneralForumTopicParameters struct {
	ChatId Integer `json:"chat_id"`
}

// UnhideGeneralForumTopicParameters is the set of parameters for the unhideGeneralForumTopic method.
// Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
type UnhideGeneralForumTopicParameters struct {
	ChatId Integer `json:"chat_id"`
}

// AnswerCallbackQueryParameters is the set of parameters for the answerCallbackQuery method.
// Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.
type AnswerCallbackQueryParameters struct {
}

// SetMyCommandsParameters is the set of parameters for the setMyCommands method.
// Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success.
type SetMyCommandsParameters struct {
	Commands     []*BotCommand    `json:"commands"`
	Scope        *BotCommandScope `json:"scope,omitempty"`
	LanguageCode string           `json:"language_code,omitempty"`
}

// DeleteMyCommandsParameters is the set of parameters for the deleteMyCommands method.
// Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.
type DeleteMyCommandsParameters struct {
	Scope        *BotCommandScope `json:"scope,omitempty"`
	LanguageCode string           `json:"language_code,omitempty"`
}

// GetMyCommandsParameters is the set of parameters for the getMyCommands method.
// Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.
type GetMyCommandsParameters struct {
	Scope        *BotCommandScope `json:"scope,omitempty"`
	LanguageCode string           `json:"language_code,omitempty"`
}

// SetMyNameParameters is the set of parameters for the setMyName method.
// Use this method to change the bot's name. Returns True on success.
type SetMyNameParameters struct {
	Name         string `json:"name,omitempty"`
	LanguageCode string `json:"language_code,omitempty"`
}

// GetMyNameParameters is the set of parameters for the getMyName method.
// Use this method to get the current bot name for the given user language. Returns BotName on success.
type GetMyNameParameters struct {
	LanguageCode string `json:"language_code,omitempty"`
}

// SetMyDescriptionParameters is the set of parameters for the setMyDescription method.
// Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.
type SetMyDescriptionParameters struct {
	Description  string `json:"description,omitempty"`
	LanguageCode string `json:"language_code,omitempty"`
}

// GetMyDescriptionParameters is the set of parameters for the getMyDescription method.
// Use this method to get the current bot description for the given user language. Returns BotDescription on success.
type GetMyDescriptionParameters struct {
	LanguageCode string `json:"language_code,omitempty"`
}

// SetMyShortDescriptionParameters is the set of parameters for the setMyShortDescription method.
// Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.
type SetMyShortDescriptionParameters struct {
	ShortDescription string `json:"short_description,omitempty"`
	LanguageCode     string `json:"language_code,omitempty"`
}

// GetMyShortDescriptionParameters is the set of parameters for the getMyShortDescription method.
// Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.
type GetMyShortDescriptionParameters struct {
	LanguageCode string `json:"language_code,omitempty"`
}

// SetChatMenuButtonParameters is the set of parameters for the setChatMenuButton method.
// Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.
type SetChatMenuButtonParameters struct {
	ChatId     int64       `json:"chat_id,omitempty"`
	MenuButton *MenuButton `json:"menu_button,omitempty"`
}

// GetChatMenuButtonParameters is the set of parameters for the getChatMenuButton method.
// Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.
type GetChatMenuButtonParameters struct {
	ChatId int64 `json:"chat_id,omitempty"`
}

// SetMyDefaultAdministratorRightsParameters is the set of parameters for the setMyDefaultAdministratorRights method.
// Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.
type SetMyDefaultAdministratorRightsParameters struct {
	Rights      *ChatAdministratorRights `json:"rights,omitempty"`
	ForChannels bool                     `json:"for_channels,omitempty"`
}

// GetMyDefaultAdministratorRightsParameters is the set of parameters for the getMyDefaultAdministratorRights method.
// Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.
type GetMyDefaultAdministratorRightsParameters struct {
	ForChannels bool `json:"for_channels,omitempty"`
}

// EditMessageTextParameters is the set of parameters for the editMessageText method.
// Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageTextParameters struct {
	ChatId                Integer               `json:"chat_id,omitempty"`
	MessageId             int64                 `json:"message_id,omitempty"`
	InlineMessageId       string                `json:"inline_message_id,omitempty"`
	Text                  string                `json:"text"`
	ParseMode             string                `json:"parse_mode,omitempty"`
	Entities              []*MessageEntity      `json:"entities,omitempty"`
	DisableWebPagePreview bool                  `json:"disable_web_page_preview,omitempty"`
	ReplyMarkup           *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// EditMessageCaptionParameters is the set of parameters for the editMessageCaption method.
// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageCaptionParameters struct {
	ChatId          Integer               `json:"chat_id,omitempty"`
	MessageId       int64                 `json:"message_id,omitempty"`
	InlineMessageId string                `json:"inline_message_id,omitempty"`
	Caption         string                `json:"caption,omitempty"`
	ParseMode       string                `json:"parse_mode,omitempty"`
	CaptionEntities []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup     *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// EditMessageMediaParameters is the set of parameters for the editMessageMedia method.
// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageMediaParameters struct {
	ChatId          Integer               `json:"chat_id,omitempty"`
	MessageId       int64                 `json:"message_id,omitempty"`
	InlineMessageId string                `json:"inline_message_id,omitempty"`
	Media           *InputMedia           `json:"media"`
	ReplyMarkup     *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// EditMessageLiveLocationParameters is the set of parameters for the editMessageLiveLocation method.
// Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageLiveLocationParameters struct {
	ChatId               Integer               `json:"chat_id,omitempty"`
	MessageId            int64                 `json:"message_id,omitempty"`
	InlineMessageId      string                `json:"inline_message_id,omitempty"`
	Latitude             float64               `json:"latitude"`
	Longitude            float64               `json:"longitude"`
	HorizontalAccuracy   float64               `json:"horizontal_accuracy,omitempty"`
	Heading              int                   `json:"heading,omitempty"`
	ProximityAlertRadius int                   `json:"proximity_alert_radius,omitempty"`
	ReplyMarkup          *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// StopMessageLiveLocationParameters is the set of parameters for the stopMessageLiveLocation method.
// Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.
type StopMessageLiveLocationParameters struct {
	ChatId          Integer               `json:"chat_id,omitempty"`
	MessageId       int64                 `json:"message_id,omitempty"`
	InlineMessageId string                `json:"inline_message_id,omitempty"`
	ReplyMarkup     *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// EditMessageReplyMarkupParameters is the set of parameters for the editMessageReplyMarkup method.
// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
type EditMessageReplyMarkupParameters struct {
	ChatId          Integer               `json:"chat_id,omitempty"`
	MessageId       int64                 `json:"message_id,omitempty"`
	InlineMessageId string                `json:"inline_message_id,omitempty"`
	ReplyMarkup     *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// StopPollParameters is the set of parameters for the stopPoll method.
// Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.
type StopPollParameters struct {
	ChatId      Integer               `json:"chat_id"`
	MessageId   int64                 `json:"message_id"`
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// DeleteMessageParameters is the set of parameters for the deleteMessage method.
// Use this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- Service messages about a supergroup, channel, or forum topic creation can't be deleted.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted can_post_messages permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.Returns True on success.
type DeleteMessageParameters struct {
	ChatId    Integer `json:"chat_id"`
	MessageId int64   `json:"message_id"`
}

// This object represents a sticker.
type Sticker struct {
	FileId           string        `json:"file_id"`
	FileUniqueId     string        `json:"file_unique_id"`
	Type             string        `json:"type"`
	Width            int           `json:"width"`
	Height           int           `json:"height"`
	IsAnimated       bool          `json:"is_animated"`
	IsVideo          bool          `json:"is_video"`
	Thumbnail        *PhotoSize    `json:"thumbnail,omitempty"`
	Emoji            string        `json:"emoji,omitempty"`
	SetName          string        `json:"set_name,omitempty"`
	PremiumAnimation *File         `json:"premium_animation,omitempty"`
	MaskPosition     *MaskPosition `json:"mask_position,omitempty"`
	CustomEmojiId    string        `json:"custom_emoji_id,omitempty"`
	NeedsRepainting  bool          `json:"needs_repainting,omitempty"`
	FileSize         int           `json:"file_size,omitempty"`
}

// This object represents a sticker set.
type StickerSet struct {
	Name        string     `json:"name"`
	Title       string     `json:"title"`
	StickerType string     `json:"sticker_type"`
	IsAnimated  bool       `json:"is_animated"`
	IsVideo     bool       `json:"is_video"`
	Stickers    []*Sticker `json:"stickers"`
	Thumbnail   *PhotoSize `json:"thumbnail,omitempty"`
}

// This object describes the position on faces where a mask should be placed by default.
type MaskPosition struct {
	Point  string  `json:"point"`
	XShift float64 `json:"x_shift"`
	YShift float64 `json:"y_shift"`
	Scale  float64 `json:"scale"`
}

// This object describes a sticker to be added to a sticker set.
type InputSticker struct {
	Sticker      json.RawMessage `json:"sticker"` // InputFile or String
	EmojiList    []string        `json:"emoji_list"`
	MaskPosition *MaskPosition   `json:"mask_position,omitempty"`
	Keywords     []string        `json:"keywords,omitempty"`
}

// SendStickerParameters is the set of parameters for the sendSticker method.
// Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.
type SendStickerParameters struct {
	ChatId                   Integer     `json:"chat_id"`
	MessageThreadId          int64       `json:"message_thread_id,omitempty"`
	Sticker                  interface{} `json:"sticker"` // InputFile or String
	Emoji                    string      `json:"emoji,omitempty"`
	DisableNotification      bool        `json:"disable_notification,omitempty"`
	ProtectContent           bool        `json:"protect_content,omitempty"`
	ReplyToMessageId         int64       `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool        `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              interface{} `json:"reply_markup,omitempty"` // InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
}

// GetStickerSetParameters is the set of parameters for the getStickerSet method.
// Use this method to get a sticker set. On success, a StickerSet object is returned.
type GetStickerSetParameters struct {
	Name string `json:"name"`
}

// GetCustomEmojiStickersParameters is the set of parameters for the getCustomEmojiStickers method.
// Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.
type GetCustomEmojiStickersParameters struct {
	CustomEmojiIds []string `json:"custom_emoji_ids"`
}

// UploadStickerFileParameters is the set of parameters for the uploadStickerFile method.
// Use this method to upload a file with a sticker for later use in the createNewStickerSet and addStickerToSet methods (the file can be used multiple times). Returns the uploaded File on success.
type UploadStickerFileParameters struct {
	UserId        int64      `json:"user_id"`
	Sticker       *InputFile `json:"sticker"`
	StickerFormat string     `json:"sticker_format"`
}

// CreateNewStickerSetParameters is the set of parameters for the createNewStickerSet method.
// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.
type CreateNewStickerSetParameters struct {
	UserId          int64           `json:"user_id"`
	Name            string          `json:"name"`
	Title           string          `json:"title"`
	Stickers        []*InputSticker `json:"stickers"`
	StickerFormat   string          `json:"sticker_format"`
	StickerType     string          `json:"sticker_type,omitempty"`
	NeedsRepainting bool            `json:"needs_repainting,omitempty"`
}

// AddStickerToSetParameters is the set of parameters for the addStickerToSet method.
// Use this method to add a new sticker to a set created by the bot. The format of the added sticker must match the format of the other stickers in the set. Emoji sticker sets can have up to 200 stickers. Animated and video sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.
type AddStickerToSetParameters struct {
	UserId  int64         `json:"user_id"`
	Name    string        `json:"name"`
	Sticker *InputSticker `json:"sticker"`
}

// SetStickerPositionInSetParameters is the set of parameters for the setStickerPositionInSet method.
// Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.
type SetStickerPositionInSetParameters struct {
	Sticker  string `json:"sticker"`
	Position int    `json:"position"`
}

// DeleteStickerFromSetParameters is the set of parameters for the deleteStickerFromSet method.
// Use this method to delete a sticker from a set created by the bot. Returns True on success.
type DeleteStickerFromSetParameters struct {
	Sticker string `json:"sticker"`
}

// SetStickerEmojiListParameters is the set of parameters for the setStickerEmojiList method.
// Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
type SetStickerEmojiListParameters struct {
	Sticker   string   `json:"sticker"`
	EmojiList []string `json:"emoji_list"`
}

// SetStickerKeywordsParameters is the set of parameters for the setStickerKeywords method.
// Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
type SetStickerKeywordsParameters struct {
	Sticker  string   `json:"sticker"`
	Keywords []string `json:"keywords,omitempty"`
}

// SetStickerMaskPositionParameters is the set of parameters for the setStickerMaskPosition method.
// Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.
type SetStickerMaskPositionParameters struct {
	Sticker      string        `json:"sticker"`
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
}

// SetStickerSetTitleParameters is the set of parameters for the setStickerSetTitle method.
// Use this method to set the title of a created sticker set. Returns True on success.
type SetStickerSetTitleParameters struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// SetStickerSetThumbnailParameters is the set of parameters for the setStickerSetThumbnail method.
// Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.
type SetStickerSetThumbnailParameters struct {
	Name      string      `json:"name"`
	UserId    int64       `json:"user_id"`
	Thumbnail interface{} `json:"thumbnail,omitempty"` // InputFile or String
}

// SetCustomEmojiStickerSetThumbnailParameters is the set of parameters for the setCustomEmojiStickerSetThumbnail method.
// Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.
type SetCustomEmojiStickerSetThumbnailParameters struct {
	Name          string `json:"name"`
	CustomEmojiId string `json:"custom_emoji_id,omitempty"`
}

// DeleteStickerSetParameters is the set of parameters for the deleteStickerSet method.
// Use this method to delete a sticker set that was created by the bot. Returns True on success.
type DeleteStickerSetParameters struct {
	Name string `json:"name"`
}

// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
type InlineQuery struct {
	Id       string    `json:"id"`
	From     *User     `json:"from"`
	Query    string    `json:"query"`
	Offset   string    `json:"offset"`
	ChatType string    `json:"chat_type,omitempty"`
	Location *Location `json:"location,omitempty"`
}

// AnswerInlineQueryParameters is the set of parameters for the answerInlineQuery method.
// Use this method to send answers to an inline query. On success, True is returned.No more than 50 results per query are allowed.
type AnswerInlineQueryParameters struct {
	InlineQueryId string                    `json:"inline_query_id"`
	Results       []*InlineQueryResult      `json:"results"`
	CacheTime     int                       `json:"cache_time,omitempty"`
	IsPersonal    bool                      `json:"is_personal,omitempty"`
	NextOffset    string                    `json:"next_offset,omitempty"`
	Button        *InlineQueryResultsButton `json:"button,omitempty"`
}

// This object represents a button to be shown above inline query results. You must use exactly one of the optional fields.
type InlineQueryResultsButton struct {
	Text           string      `json:"text"`
	WebApp         *WebAppInfo `json:"web_app,omitempty"`
	StartParameter string      `json:"start_parameter,omitempty"`
}

// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
type InlineQueryResult struct {
}

// Represents a link to an article or web page.
type InlineQueryResultArticle struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	Title               string                `json:"title"`
	InputMessageContent *InputMessageContent  `json:"input_message_content"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	URL                 string                `json:"url,omitempty"`
	HideURL             bool                  `json:"hide_url,omitempty"`
	Description         string                `json:"description,omitempty"`
	ThumbnailURL        string                `json:"thumbnail_url,omitempty"`
	ThumbnailWidth      int                   `json:"thumbnail_width,omitempty"`
	ThumbnailHeight     int                   `json:"thumbnail_height,omitempty"`
}

// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultPhoto struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	PhotoURL            string                `json:"photo_url"`
	ThumbnailURL        string                `json:"thumbnail_url"`
	PhotoWidth          int                   `json:"photo_width,omitempty"`
	PhotoHeight         int                   `json:"photo_height,omitempty"`
	Title               string                `json:"title,omitempty"`
	Description         string                `json:"description,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultGif struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	GifURL              string                `json:"gif_url"`
	GifWidth            int                   `json:"gif_width,omitempty"`
	GifHeight           int                   `json:"gif_height,omitempty"`
	GifDuration         int                   `json:"gif_duration,omitempty"`
	ThumbnailURL        string                `json:"thumbnail_url"`
	ThumbnailMIMEType   string                `json:"thumbnail_mime_type,omitempty"`
	Title               string                `json:"title,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultVideo struct {
}

// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultAudio struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	AudioURL            string                `json:"audio_url"`
	Title               string                `json:"title"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	Performer           string                `json:"performer,omitempty"`
	AudioDuration       int                   `json:"audio_duration,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
type InlineQueryResultVoice struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	VoiceURL            string                `json:"voice_url"`
	Title               string                `json:"title"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	VoiceDuration       int                   `json:"voice_duration,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
type InlineQueryResultDocument struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	Title               string                `json:"title"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	DocumentURL         string                `json:"document_url"`
	MIMEType            string                `json:"mime_type"`
	Description         string                `json:"description,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
	ThumbnailURL        string                `json:"thumbnail_url,omitempty"`
	ThumbnailWidth      int                   `json:"thumbnail_width,omitempty"`
	ThumbnailHeight     int                   `json:"thumbnail_height,omitempty"`
}

// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
type InlineQueryResultLocation struct {
	Type                 string                `json:"type"`
	Id                   string                `json:"id"`
	Latitude             float64               `json:"latitude"`
	Longitude            float64               `json:"longitude"`
	Title                string                `json:"title"`
	HorizontalAccuracy   float64               `json:"horizontal_accuracy,omitempty"`
	LivePeriod           int                   `json:"live_period,omitempty"`
	Heading              int                   `json:"heading,omitempty"`
	ProximityAlertRadius int                   `json:"proximity_alert_radius,omitempty"`
	ReplyMarkup          *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent  *InputMessageContent  `json:"input_message_content,omitempty"`
	ThumbnailURL         string                `json:"thumbnail_url,omitempty"`
	ThumbnailWidth       int                   `json:"thumbnail_width,omitempty"`
	ThumbnailHeight      int                   `json:"thumbnail_height,omitempty"`
}

// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
type InlineQueryResultVenue struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	Latitude            float64               `json:"latitude"`
	Longitude           float64               `json:"longitude"`
	Title               string                `json:"title"`
	Address             string                `json:"address"`
	FoursquareId        string                `json:"foursquare_id,omitempty"`
	FoursquareType      string                `json:"foursquare_type,omitempty"`
	GooglePlaceId       string                `json:"google_place_id,omitempty"`
	GooglePlaceType     string                `json:"google_place_type,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
	ThumbnailURL        string                `json:"thumbnail_url,omitempty"`
	ThumbnailWidth      int                   `json:"thumbnail_width,omitempty"`
	ThumbnailHeight     int                   `json:"thumbnail_height,omitempty"`
}

// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
type InlineQueryResultContact struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	PhoneNumber         string                `json:"phone_number"`
	FirstName           string                `json:"first_name"`
	LastName            string                `json:"last_name,omitempty"`
	Vcard               string                `json:"vcard,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
	ThumbnailURL        string                `json:"thumbnail_url,omitempty"`
	ThumbnailWidth      int                   `json:"thumbnail_width,omitempty"`
	ThumbnailHeight     int                   `json:"thumbnail_height,omitempty"`
}

// Represents a Game.
type InlineQueryResultGame struct {
	Type          string                `json:"type"`
	Id            string                `json:"id"`
	GameShortName string                `json:"game_short_name"`
	ReplyMarkup   *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultCachedPhoto struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	PhotoFileId         string                `json:"photo_file_id"`
	Title               string                `json:"title,omitempty"`
	Description         string                `json:"description,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
type InlineQueryResultCachedGif struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	GifFileId           string                `json:"gif_file_id"`
	Title               string                `json:"title,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
type InlineQueryResultCachedSticker struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	StickerFileId       string                `json:"sticker_file_id"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.
type InlineQueryResultCachedDocument struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	Title               string                `json:"title"`
	DocumentFileId      string                `json:"document_file_id"`
	Description         string                `json:"description,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultCachedVideo struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	VideoFileId         string                `json:"video_file_id"`
	Title               string                `json:"title"`
	Description         string                `json:"description,omitempty"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
type InlineQueryResultCachedVoice struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	VoiceFileId         string                `json:"voice_file_id"`
	Title               string                `json:"title"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultCachedAudio struct {
	Type                string                `json:"type"`
	Id                  string                `json:"id"`
	AudioFileId         string                `json:"audio_file_id"`
	Caption             string                `json:"caption,omitempty"`
	ParseMode           string                `json:"parse_mode,omitempty"`
	CaptionEntities     []*MessageEntity      `json:"caption_entities,omitempty"`
	ReplyMarkup         *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	InputMessageContent *InputMessageContent  `json:"input_message_content,omitempty"`
}

// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:
type InputMessageContent struct {
}

// Represents the content of a text message to be sent as the result of an inline query.
type InputTextMessageContent struct {
	MessageText           string           `json:"message_text"`
	ParseMode             string           `json:"parse_mode,omitempty"`
	Entities              []*MessageEntity `json:"entities,omitempty"`
	DisableWebPagePreview bool             `json:"disable_web_page_preview,omitempty"`
}

// Represents the content of a location message to be sent as the result of an inline query.
type InputLocationMessageContent struct {
	Latitude             float64 `json:"latitude"`
	Longitude            float64 `json:"longitude"`
	HorizontalAccuracy   float64 `json:"horizontal_accuracy,omitempty"`
	LivePeriod           int     `json:"live_period,omitempty"`
	Heading              int     `json:"heading,omitempty"`
	ProximityAlertRadius int     `json:"proximity_alert_radius,omitempty"`
}

// Represents the content of a venue message to be sent as the result of an inline query.
type InputVenueMessageContent struct {
	Latitude        float64 `json:"latitude"`
	Longitude       float64 `json:"longitude"`
	Title           string  `json:"title"`
	Address         string  `json:"address"`
	FoursquareId    string  `json:"foursquare_id,omitempty"`
	FoursquareType  string  `json:"foursquare_type,omitempty"`
	GooglePlaceId   string  `json:"google_place_id,omitempty"`
	GooglePlaceType string  `json:"google_place_type,omitempty"`
}

// Represents the content of a contact message to be sent as the result of an inline query.
type InputContactMessageContent struct {
	PhoneNumber string `json:"phone_number"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name,omitempty"`
	Vcard       string `json:"vcard,omitempty"`
}

// Represents the content of an invoice message to be sent as the result of an inline query.
type InputInvoiceMessageContent struct {
	Title                     string          `json:"title"`
	Description               string          `json:"description"`
	Payload                   string          `json:"payload"`
	ProviderToken             string          `json:"provider_token"`
	Currency                  string          `json:"currency"`
	Prices                    []*LabeledPrice `json:"prices"`
	MaxTipAmount              int             `json:"max_tip_amount,omitempty"`
	SuggestedTipAmounts       []int           `json:"suggested_tip_amounts,omitempty"`
	ProviderData              string          `json:"provider_data,omitempty"`
	PhotoURL                  string          `json:"photo_url,omitempty"`
	PhotoSize                 int             `json:"photo_size,omitempty"`
	PhotoWidth                int             `json:"photo_width,omitempty"`
	PhotoHeight               int             `json:"photo_height,omitempty"`
	NeedName                  bool            `json:"need_name,omitempty"`
	NeedPhoneNumber           bool            `json:"need_phone_number,omitempty"`
	NeedEmail                 bool            `json:"need_email,omitempty"`
	NeedShippingAddress       bool            `json:"need_shipping_address,omitempty"`
	SendPhoneNumberToProvider bool            `json:"send_phone_number_to_provider,omitempty"`
	SendEmailToProvider       bool            `json:"send_email_to_provider,omitempty"`
	IsFlexible                bool            `json:"is_flexible,omitempty"`
}

// Represents a result of an inline query that was chosen by the user and sent to their chat partner.
type ChosenInlineResult struct {
	ResultId        string    `json:"result_id"`
	From            *User     `json:"from"`
	Location        *Location `json:"location,omitempty"`
	InlineMessageId string    `json:"inline_message_id,omitempty"`
	Query           string    `json:"query"`
}

// AnswerWebAppQueryParameters is the set of parameters for the answerWebAppQuery method.
// Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.
type AnswerWebAppQueryParameters struct {
	WebAppQueryId string             `json:"web_app_query_id"`
	Result        *InlineQueryResult `json:"result"`
}

// Describes an inline message sent by a Web App on behalf of a user.
type SentWebAppMessage struct {
	InlineMessageId string `json:"inline_message_id,omitempty"`
}

// SendInvoiceParameters is the set of parameters for the sendInvoice method.
// Use this method to send invoices. On success, the sent Message is returned.
type SendInvoiceParameters struct {
	ChatId                    Integer               `json:"chat_id"`
	MessageThreadId           int64                 `json:"message_thread_id,omitempty"`
	Title                     string                `json:"title"`
	Description               string                `json:"description"`
	Payload                   string                `json:"payload"`
	ProviderToken             string                `json:"provider_token"`
	Currency                  string                `json:"currency"`
	Prices                    []*LabeledPrice       `json:"prices"`
	MaxTipAmount              int                   `json:"max_tip_amount,omitempty"`
	SuggestedTipAmounts       []int                 `json:"suggested_tip_amounts,omitempty"`
	StartParameter            string                `json:"start_parameter,omitempty"`
	ProviderData              string                `json:"provider_data,omitempty"`
	PhotoURL                  string                `json:"photo_url,omitempty"`
	PhotoSize                 int                   `json:"photo_size,omitempty"`
	PhotoWidth                int                   `json:"photo_width,omitempty"`
	PhotoHeight               int                   `json:"photo_height,omitempty"`
	NeedName                  bool                  `json:"need_name,omitempty"`
	NeedPhoneNumber           bool                  `json:"need_phone_number,omitempty"`
	NeedEmail                 bool                  `json:"need_email,omitempty"`
	NeedShippingAddress       bool                  `json:"need_shipping_address,omitempty"`
	SendPhoneNumberToProvider bool                  `json:"send_phone_number_to_provider,omitempty"`
	SendEmailToProvider       bool                  `json:"send_email_to_provider,omitempty"`
	IsFlexible                bool                  `json:"is_flexible,omitempty"`
	DisableNotification       bool                  `json:"disable_notification,omitempty"`
	ProtectContent            bool                  `json:"protect_content,omitempty"`
	ReplyToMessageId          int64                 `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply  bool                  `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup               *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// CreateInvoiceLinkParameters is the set of parameters for the createInvoiceLink method.
// Use this method to create a link for an invoice. Returns the created invoice link as String on success.
type CreateInvoiceLinkParameters struct {
	Title                     string          `json:"title"`
	Description               string          `json:"description"`
	Payload                   string          `json:"payload"`
	ProviderToken             string          `json:"provider_token"`
	Currency                  string          `json:"currency"`
	Prices                    []*LabeledPrice `json:"prices"`
	MaxTipAmount              int             `json:"max_tip_amount,omitempty"`
	SuggestedTipAmounts       []int           `json:"suggested_tip_amounts,omitempty"`
	ProviderData              string          `json:"provider_data,omitempty"`
	PhotoURL                  string          `json:"photo_url,omitempty"`
	PhotoSize                 int             `json:"photo_size,omitempty"`
	PhotoWidth                int             `json:"photo_width,omitempty"`
	PhotoHeight               int             `json:"photo_height,omitempty"`
	NeedName                  bool            `json:"need_name,omitempty"`
	NeedPhoneNumber           bool            `json:"need_phone_number,omitempty"`
	NeedEmail                 bool            `json:"need_email,omitempty"`
	NeedShippingAddress       bool            `json:"need_shipping_address,omitempty"`
	SendPhoneNumberToProvider bool            `json:"send_phone_number_to_provider,omitempty"`
	SendEmailToProvider       bool            `json:"send_email_to_provider,omitempty"`
	IsFlexible                bool            `json:"is_flexible,omitempty"`
}

// AnswerShippingQueryParameters is the set of parameters for the answerShippingQuery method.
// If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
type AnswerShippingQueryParameters struct {
	ShippingQueryId string            `json:"shipping_query_id"`
	Ok              bool              `json:"ok"`
	ShippingOptions []*ShippingOption `json:"shipping_options,omitempty"`
	ErrorMessage    string            `json:"error_message,omitempty"`
}

// AnswerPreCheckoutQueryParameters is the set of parameters for the answerPreCheckoutQuery method.
// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
type AnswerPreCheckoutQueryParameters struct {
	PreCheckoutQueryId string `json:"pre_checkout_query_id"`
	Ok                 bool   `json:"ok"`
	ErrorMessage       string `json:"error_message,omitempty"`
}

// This object represents a portion of the price for goods or services.
type LabeledPrice struct {
	Label  string `json:"label"`
	Amount int    `json:"amount"`
}

// This object contains basic information about an invoice.
type Invoice struct {
	Title          string `json:"title"`
	Description    string `json:"description"`
	StartParameter string `json:"start_parameter"`
	Currency       string `json:"currency"`
	TotalAmount    int    `json:"total_amount"`
}

// This object represents a shipping address.
type ShippingAddress struct {
	CountryCode string `json:"country_code"`
	State       string `json:"state"`
	City        string `json:"city"`
	StreetLine1 string `json:"street_line1"`
	StreetLine2 string `json:"street_line2"`
	PostCode    string `json:"post_code"`
}

// This object represents information about an order.
type OrderInfo struct {
	Name            string           `json:"name,omitempty"`
	PhoneNumber     string           `json:"phone_number,omitempty"`
	Email           string           `json:"email,omitempty"`
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

// This object represents one shipping option.
type ShippingOption struct {
	Id     string          `json:"id"`
	Title  string          `json:"title"`
	Prices []*LabeledPrice `json:"prices"`
}

// This object contains basic information about a successful payment.
type SuccessfulPayment struct {
	Currency                string     `json:"currency"`
	TotalAmount             int        `json:"total_amount"`
	InvoicePayload          string     `json:"invoice_payload"`
	ShippingOptionId        string     `json:"shipping_option_id,omitempty"`
	OrderInfo               *OrderInfo `json:"order_info,omitempty"`
	TelegramPaymentChargeId string     `json:"telegram_payment_charge_id"`
	ProviderPaymentChargeId string     `json:"provider_payment_charge_id"`
}

// This object contains information about an incoming shipping query.
type ShippingQuery struct {
	Id              string           `json:"id"`
	From            *User            `json:"from"`
	InvoicePayload  string           `json:"invoice_payload"`
	ShippingAddress *ShippingAddress `json:"shipping_address"`
}

// This object contains information about an incoming pre-checkout query.
type PreCheckoutQuery struct {
	Id               string     `json:"id"`
	From             *User      `json:"from"`
	Currency         string     `json:"currency"`
	TotalAmount      int        `json:"total_amount"`
	InvoicePayload   string     `json:"invoice_payload"`
	ShippingOptionId string     `json:"shipping_option_id,omitempty"`
	OrderInfo        *OrderInfo `json:"order_info,omitempty"`
}

// Describes Telegram Passport data shared with the bot by the user.
type PassportData struct {
	Data        []*EncryptedPassportElement `json:"data"`
	Credentials *EncryptedCredentials       `json:"credentials"`
}

// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
type PassportFile struct {
	FileId       string `json:"file_id"`
	FileUniqueId string `json:"file_unique_id"`
	FileSize     int    `json:"file_size"`
	FileDate     int    `json:"file_date"`
}

// Describes documents or other Telegram Passport elements shared with the bot by the user.
type EncryptedPassportElement struct {
	Type        string          `json:"type"`
	Data        string          `json:"data,omitempty"`
	PhoneNumber string          `json:"phone_number,omitempty"`
	Email       string          `json:"email,omitempty"`
	Files       []*PassportFile `json:"files,omitempty"`
	FrontSide   *PassportFile   `json:"front_side,omitempty"`
	ReverseSide *PassportFile   `json:"reverse_side,omitempty"`
	Selfie      *PassportFile   `json:"selfie,omitempty"`
	Translation []*PassportFile `json:"translation,omitempty"`
	Hash        string          `json:"hash"`
}

// Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.
type EncryptedCredentials struct {
	Data   string `json:"data"`
	Hash   string `json:"hash"`
	Secret string `json:"secret"`
}

// SetPassportDataErrorsParameters is the set of parameters for the setPassportDataErrors method.
// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
type SetPassportDataErrorsParameters struct {
}

// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
type PassportElementError struct {
}

// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
type PassportElementErrorDataField struct {
	Source    string `json:"source"`
	Type      string `json:"type"`
	FieldName string `json:"field_name"`
	DataHash  string `json:"data_hash"`
	Message   string `json:"message"`
}

// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
type PassportElementErrorFrontSide struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
type PassportElementErrorReverseSide struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
type PassportElementErrorSelfie struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
type PassportElementErrorFile struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
type PassportElementErrorFiles struct {
	Source     string   `json:"source"`
	Type       string   `json:"type"`
	FileHashes []string `json:"file_hashes"`
	Message    string   `json:"message"`
}

// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
type PassportElementErrorTranslationFile struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
type PassportElementErrorTranslationFiles struct {
	Source     string   `json:"source"`
	Type       string   `json:"type"`
	FileHashes []string `json:"file_hashes"`
	Message    string   `json:"message"`
}

// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
type PassportElementErrorUnspecified struct {
	Source      string `json:"source"`
	Type        string `json:"type"`
	ElementHash string `json:"element_hash"`
	Message     string `json:"message"`
}

// SendGameParameters is the set of parameters for the sendGame method.
// Use this method to send a game. On success, the sent Message is returned.
type SendGameParameters struct {
	ChatId                   int64                 `json:"chat_id"`
	MessageThreadId          int64                 `json:"message_thread_id,omitempty"`
	GameShortName            string                `json:"game_short_name"`
	DisableNotification      bool                  `json:"disable_notification,omitempty"`
	ProtectContent           bool                  `json:"protect_content,omitempty"`
	ReplyToMessageId         int64                 `json:"reply_to_message_id,omitempty"`
	AllowSendingWithoutReply bool                  `json:"allow_sending_without_reply,omitempty"`
	ReplyMarkup              *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
type Game struct {
	Title        string           `json:"title"`
	Description  string           `json:"description"`
	Photo        []*PhotoSize     `json:"photo"`
	Text         string           `json:"text,omitempty"`
	TextEntities []*MessageEntity `json:"text_entities,omitempty"`
	Animation    *Animation       `json:"animation,omitempty"`
}

// A placeholder, currently holds no information. Use BotFather to set up your game.
type CallbackGame struct {
}

// SetGameScoreParameters is the set of parameters for the setGameScore method.
// Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.
type SetGameScoreParameters struct {
	UserId             int64  `json:"user_id"`
	Score              int    `json:"score"`
	Force              bool   `json:"force,omitempty"`
	DisableEditMessage bool   `json:"disable_edit_message,omitempty"`
	ChatId             int64  `json:"chat_id,omitempty"`
	MessageId          int64  `json:"message_id,omitempty"`
	InlineMessageId    string `json:"inline_message_id,omitempty"`
}

// GetGameHighScoresParameters is the set of parameters for the getGameHighScores method.
// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.
type GetGameHighScoresParameters struct {
}

// This object represents one row of the high scores table for a game.
type GameHighScore struct {
	Position int   `json:"position"`
	User     *User `json:"user"`
	Score    int   `json:"score"`
}
