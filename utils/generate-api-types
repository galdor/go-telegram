#!/usr/bin/env ruby

require "net/http"
require "nokogiri"
require "uri"
require "time"

class Scrapper
  def initialize(uri)
    @uri = URI.parse(uri)
    @doc = nil
    @types = nil
  end

  def fetch()
    data = Net::HTTP.get(@uri)
    @doc = Nokogiri::HTML5.parse(data)
  end

  def extract_types()
    fetch() unless @doc

    types = {}

    titles = @doc.css("h4")

    titles.each() do |title|
      description_paragraph = title.next_element()
      next unless description_paragraph.name() == "p"

      table = description_paragraph.next_element()
      # Types which do not contain fields do not have a table element

      type_name = title.text()
      next unless type_name.match /^[A-Za-z]+$/
      method_type = type_name[0] >= 'a' && type_name[0] <= 'z'
      if method_type
        method_name = type_name
        type_name = type_name.sub(/\S/, &:upcase) + "Parameters"
      end

      description = description_paragraph.text()
      if method_type
        description = "#{type_name} is the set of parameters for the "+
                      "#{method_name} method.\n// "+description
      end

      fields = []

      if table
        table.css("tbody > tr").each do |row|
          cells = row.css("td")

          nb_cells = method_type ? 4 : 3
          if cells.length != nb_cells
            raise "type row #{row.inspect()} does not have #{nb_cells} cells"
          end

          field_name = cells[0].text()
          field_type = cells[1].text()

          field_description = nil
          if method_type
            field_description = cells[3].text()
          else
            field_description = cells[2].text()
          end

          optional = nil
          if method_type
            optional = cells[2].text() == "Optional"
          else
            optional = cells[2].at_css("em")&.text() == "Optional"
          end

          fields << {
            name: field_name,
            type: field_type,
            method_type: method_type,
            optional: optional,
            description: field_description,
          }
        end
      end

      types[type_name] = {
        name: type_name,
        description: description,
        fields: fields,
      }
    end

    @types = types
  end

  def generate_go_types(package_name: "main")
    extract_types() unless @types

    now = Time.now().utc()

    buf = StringIO.new()

    buf << "// File generated by #{$0} at #{now.iso8601()}\n"
    buf << "// using data from #{@uri}.\n\n"
    buf << "package #{package_name}\n"

    buf << "import \"encoding/json\""

    @types.each() do |name, type|
      buf << "\n// #{type[:description]}\n"
      buf << "type #{type[:name]} struct {\n"

      type[:fields].each() do |field|
        name = snake_case_to_pascal_case(field[:name])
        type = go_type(field[:type], field)

        json_tag = field[:name]
        json_tag += ",omitempty" if field[:optional]

        buf << "#{name} #{type} `json:\"#{json_tag}\"`"
        if type == "interface{}" || type == "json.RawMessage"
          buf << " // "
          buf << field[:type]
        end
        buf << "\n"
      end

      buf << "}\n"
    end

    IO.popen(["gofmt"], "r+") do |io|
      io.write(buf.string())
      io.close_write()
      puts io.read()
    end
  end

  def snake_case_to_pascal_case(string)
    return string.split("_").map do |word|
      case word
      when "mime"
        "MIME"
      when "url"
        "URL"
      else
        word.capitalize()
      end
    end.join
  end

  def go_type(type_string, field)
    case type_string
    when "String"
      "string"
    when "Boolean", "True"
      "bool"
    when "Integer"
      if field[:name] == "id" || field[:name].match(/_id$/)
        "int64"
      else
        "int"
      end
    when "Float", "Float number"
      "float64"
    when /^Array of (.*)$/
      "[]" + go_type($1, field)
    when "Integer or String"
      "Integer"
    when /^[A-Za-z]+$/
      "*"+type_string
    when /^[^ ]+(?: or [^ ]+)+$/, /^[^ ]+(?:, [^ ]+)*(?: and [^ ]+)$/
      if field[:method_type]
        # In method request objects, we want to be able to easily pass a value
        # of any type and let the JSON encoder serialize it correctly.
        "interface{}"
      else
        "json.RawMessage"
      end
    else
      raise "invalid type \"#{type_string}\""
    end
  end
end

scrapper = Scrapper.new("https://core.telegram.org/bots/api")
print scrapper.generate_go_types(package_name: "bot")
